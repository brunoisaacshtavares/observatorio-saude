// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using observatorio.saude.Infra.Data;

#nullable disable

namespace observatorio.saude.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250907030715_CriacaoInicial")]
    partial class CriacaoInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("observatorio.saude.Domain.Entities.CaracteristicaEstabelecimento", b =>
                {
                    b.Property<string>("CodUnidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cod_unidade");

                    b.Property<int?>("CodMotivoDesab")
                        .HasColumnType("integer")
                        .HasColumnName("cod_motivo_desab");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("NmFantasia")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nm_fantasia");

                    b.Property<string>("NmRazaoSocial")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nm_razao_social");

                    b.Property<string>("NumCnpj")
                        .HasColumnType("text")
                        .HasColumnName("num_cnpj");

                    b.Property<string>("NumCnpjEntidade")
                        .HasColumnType("text")
                        .HasColumnName("num_cnpj_entidade");

                    b.Property<string>("NumTelefone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("num_telefone");

                    b.HasKey("CodUnidade");

                    b.ToTable("dim_estabelecimento");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Estabelecimento", b =>
                {
                    b.Property<long>("CodCnes")
                        .HasColumnType("bigint")
                        .HasColumnName("cod_cnes");

                    b.Property<long>("CodTurnoAtendimento")
                        .HasColumnType("bigint")
                        .HasColumnName("cod_turno_atendimento");

                    b.Property<string>("CodUnidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cod_unidade");

                    b.Property<DateTime>("DataExtracao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_extracao");

                    b.HasKey("CodCnes");

                    b.HasIndex("CodTurnoAtendimento");

                    b.HasIndex("CodUnidade")
                        .IsUnique();

                    b.ToTable("fato_estabelecimento");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Localizacao", b =>
                {
                    b.Property<string>("CodUnidade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cod_unidade");

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bairro");

                    b.Property<long?>("CodCep")
                        .HasColumnType("bigint")
                        .HasColumnName("cod_cep");

                    b.Property<int?>("CodIbge")
                        .HasColumnType("integer")
                        .HasColumnName("cod_ibge");

                    b.Property<long?>("CodUf")
                        .HasColumnType("bigint")
                        .HasColumnName("cod_uf");

                    b.Property<string>("Endereco")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("endereco");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric(18, 15)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric(18, 15)")
                        .HasColumnName("longitude");

                    b.Property<long?>("Numero")
                        .HasColumnType("bigint")
                        .HasColumnName("numero");

                    b.HasKey("CodUnidade");

                    b.ToTable("dim_localizacao");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Organizacao", b =>
                {
                    b.Property<long>("CodCnes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cod_cnes");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CodCnes"));

                    b.Property<long?>("CodAtividade")
                        .HasColumnType("bigint")
                        .HasColumnName("cod_atividade");

                    b.Property<char?>("CodEsferaAdministrativa")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)")
                        .HasColumnName("cod_esfera_administrativa");

                    b.Property<long?>("CodNaturezaJur")
                        .HasColumnType("bigint")
                        .HasColumnName("cod_natureza_jur");

                    b.Property<long?>("CodNaturezaOrganizacao")
                        .HasColumnType("bigint")
                        .HasColumnName("cod_natureza_organizacao");

                    b.Property<long?>("CodNivelHierarquia")
                        .HasColumnType("bigint")
                        .HasColumnName("cod_nivel_hierarquia");

                    b.Property<string>("DscrEsferaAdministrativa")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("dscr_esfera_administrativa");

                    b.Property<string>("DscrNaturezaOrganizacao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dscr_natureza_organizacao");

                    b.Property<string>("DscrNivelHierarquia")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("dscr_nivel_hierarquia");

                    b.Property<char?>("TpGestao")
                        .HasColumnType("character(1)")
                        .HasColumnName("tp_gestao");

                    b.Property<long?>("TpUnidade")
                        .HasColumnType("bigint")
                        .HasColumnName("tp_unidade");

                    b.HasKey("CodCnes");

                    b.ToTable("dim_organizacao");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Servico", b =>
                {
                    b.Property<long>("CodCnes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cod_cnes");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CodCnes"));

                    b.Property<bool?>("StAtendimentoAmbulatorial")
                        .HasColumnType("boolean")
                        .HasColumnName("st_atendimento_ambulatorial");

                    b.Property<bool?>("StAtendimentoHospitalar")
                        .HasColumnType("boolean")
                        .HasColumnName("st_atendimento_hospitalar");

                    b.Property<bool?>("StCentroCirurgico")
                        .HasColumnType("boolean")
                        .HasColumnName("st_centro_cirurgico");

                    b.Property<bool?>("StCentroNeonatal")
                        .HasColumnType("boolean")
                        .HasColumnName("st_centro_neonatal");

                    b.Property<bool?>("StCentroObstetrico")
                        .HasColumnType("boolean")
                        .HasColumnName("st_centro_obstetrico");

                    b.Property<bool?>("StFazAtendimentoAmbulatorialSus")
                        .HasColumnType("boolean")
                        .HasColumnName("st_faz_atendimento_ambulatorial_sus");

                    b.Property<bool?>("StServicoApoio")
                        .HasColumnType("boolean")
                        .HasColumnName("st_servico_apoio");

                    b.HasKey("CodCnes");

                    b.ToTable("dim_servicos");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Turno", b =>
                {
                    b.Property<long>("CodTurnoAtendimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("cod_turno_atendimento");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CodTurnoAtendimento"));

                    b.Property<string>("DscrTurnoAtendimento")
                        .HasColumnType("text")
                        .HasColumnName("dscr_turno_atendimento");

                    b.HasKey("CodTurnoAtendimento");

                    b.ToTable("dim_turno");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Estabelecimento", b =>
                {
                    b.HasOne("observatorio.saude.Domain.Entities.Organizacao", "Organizacao")
                        .WithOne("Estabelecimento")
                        .HasForeignKey("observatorio.saude.Domain.Entities.Estabelecimento", "CodCnes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("observatorio.saude.Domain.Entities.Servico", "Servico")
                        .WithOne("Estabelecimento")
                        .HasForeignKey("observatorio.saude.Domain.Entities.Estabelecimento", "CodCnes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("observatorio.saude.Domain.Entities.Turno", "Turno")
                        .WithMany("Estabelecimento")
                        .HasForeignKey("CodTurnoAtendimento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("observatorio.saude.Domain.Entities.CaracteristicaEstabelecimento", "CaracteristicaEstabelecimento")
                        .WithOne("Estabelecimento")
                        .HasForeignKey("observatorio.saude.Domain.Entities.Estabelecimento", "CodUnidade");

                    b.HasOne("observatorio.saude.Domain.Entities.Localizacao", "Localizacao")
                        .WithOne("Estabelecimento")
                        .HasForeignKey("observatorio.saude.Domain.Entities.Estabelecimento", "CodUnidade");

                    b.Navigation("CaracteristicaEstabelecimento");

                    b.Navigation("Localizacao");

                    b.Navigation("Organizacao");

                    b.Navigation("Servico");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.CaracteristicaEstabelecimento", b =>
                {
                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Localizacao", b =>
                {
                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Organizacao", b =>
                {
                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Servico", b =>
                {
                    b.Navigation("Estabelecimento");
                });

            modelBuilder.Entity("observatorio.saude.Domain.Entities.Turno", b =>
                {
                    b.Navigation("Estabelecimento");
                });
#pragma warning restore 612, 618
        }
    }
}
